<?xml version="1.0" encoding="utf-8"?>

<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="info"
      internalLogFile="internal-nlog">

    <variable name="removeNewLine" value="${replace-newlines:${message}}" />
    <variable name="removeDuplicatedWhiteSpaces"
              value="${replace:replaceWith= :regex=true:inner=${removeNewLine}:searchFor=\\s+}" />
    <variable name="messageLayout"
              value="${replace:replaceWith=...TRUNCATED:regex=true:inner=${removeDuplicatedWhiteSpaces}:searchFor=(?&lt;\=.\{1000\}).+}" />
    <variable name="firstLine"
              value="${uppercase:${level}}: [${longdate}] ${logger}[${event-properties:item=EventId_Id}]" />
    <variable name="secondLine"
              value="req-id: ${aspnet-TraceIdentifier} url: ${aspnet-request-url} action: ${aspnet-mvc-action}" />
    <variable name="logLayout"
              value="${firstLine}${newline}${pad:padding=5:inner=}${secondLine}${newline}${pad:padding=5:inner=}${messageLayout} ${exception:format=tostring}${newline}" />


    <extensions>
        <add assembly="NLog.Targets.ElasticSearch" />
    </extensions>

    <!-- the targets to write to -->
    <targets>
        <target name="elastic" xsi:type="AsyncWrapper"
                >
            <target xsi:type="ElasticSearch"
                    layout="${logLayout}">
                <!--                <field name="Timestamp" layout="${longdate}" layoutType="System.DateTime"/>-->
                <field name="RequestId" layout="${aspnet-TraceIdentifier}" /><!-- repeated, optional -->
                <field name="Url" layout="${aspnet-request-url}" />
                <field name="Action" layout="${aspnet-mvc-action}" />
                <field name="StatusCode" layout="${event-properties:StatusCode}" layoutType="System.Int32" />
                <field name="ElapsedTime" layout="${event-properties:ElapsedTime}" layoutType="System.Int64" />
                <field name="Message" layout="${message}" />
                <field name="EventId" layout="${event-properties:item=EventId_Id}" layoutType="System.Int32" />
                <field name="Logger" layout="${logger}" />
                <field name="UserAgent" layout="${aspnet-request-useragent}" />
                <field name="IP" layout="${aspnet-request-ip}" />
            </target>
        </target>


        <target name="asyncFile" xsi:type="AsyncWrapper">
            <target xsi:type="File"
                    name="defaultFile"
                    fileName="server.log"
                    layout="${message}" />
        </target>

        <!-- another file log, only own logs. Uses some ASP.NET core renderers -->
        <!--        <target xsi:type="File" name="ownFile-web" fileName="c:\temp\nlog-own-${shortdate}.log"-->
        <!--                layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />-->

        <target name="asyncConsole" xsi:type="AsyncWrapper">
            <target xsi:type="ColoredConsole"
                    name="defaultConsole"
                    encoding="utf-8"
                    layout="${logLayout}"
                    useDefaultRowHighlightingRules="false">
                <highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
                <highlight-row condition="level == LogLevel.Info" foregroundColor="Gray" />
                <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
                <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
                <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
                <highlight-word backgroundColor="White" foregroundColor="Blue" ignoreCase="False"
                                regex="^INFO" wholeWords="True" />
                <highlight-word backgroundColor="DarkCyan" foregroundColor="NoChange" ignoreCase="False"
                                regex="^DEBUG" wholeWords="True" />
                <highlight-word backgroundColor="Yellow" foregroundColor="Magenta" ignoreCase="False"
                                regex="^WARN" wholeWords="True" />
                <highlight-word backgroundColor="Red" foregroundColor="White" ignoreCase="False"
                                regex="^ERROR" wholeWords="True" />
                <highlight-word foregroundColor="Yellow" backgroundColor="DarkGray" ignoreCase="False"
                                regex="\s\d{3,}ms" wholeWords="True" />
                <highlight-word foregroundColor="Magenta" backgroundColor="White" ignoreCase="False"
                                regex="\s\d{4,}ms" wholeWords="True" />
            </target>
        </target>
    </targets>

    <!-- rules to map from logger name to target -->
    <rules>
        <!--All logs, including from Microsoft-->
        <!--        <logger name="*" minlevel="Trace" writeTo="allfile" />-->

        <!--Skip non-critical Microsoft logs and so log only own logs-->
        <!-- BlackHole without writeTo -->
        <!--        <logger name="Microsoft.EntityFrameworkCore.*" maxLevel="Info" final="true" />-->
        <!--        <logger name="Microsoft.AspNetCore.Mvc.*" maxLevel="Info" final="true" />-->
        <!--                        <logger name="Microsoft.AspNetCore.Hosting.Internal.WebHost" maxLevel="Info" final="true" />-->
        <!--        <logger name="Microsoft.*" maxLevel="Debug" final="true" />-->

        <logger name="*" minlevel="Info" writeTo="elastic">
        </logger>

<!--        <logger name="*" minlevel="Info" writeTo="asyncFile">-->
<!--        </logger>-->

        <!-- Don't Use Filtered Logger because it slows down Mainthread. -->
        <!--        <logger name="Server.*" minlevel="Trace" writeTo="asyncConsole">-->
        <!--            <filters>-->
        <!--                ~1~                <when condition="" action="Ignore | IgnoreFinal | Log | LogFinal | Neutral"/>@1@-->
        <!--                ~1~                Ignore ResponseBody Log @1@-->
        <!--~1~                <when condition="'${event-properties:item=EventId_Id}' ==  5" action="Ignore" />@1@-->
        <!--                ~1~                Ignore RequestBody Log @1@-->
        <!--~1~                <when condition="'${event-properties:item=EventId_Id}' ==  4" action="Ignore" />@1@-->
        <!--                ~1~                Ignore ProcessingTime Log @1@-->
        <!--~1~                                <when condition="'${event-properties:item=EventId_Id}' ==  3" action="Ignore" />@1@-->
        <!--                ~1~                Ignore AttachConverter Log @1@-->
        <!--~1~                <when condition="'${event-properties:item=EventId_Id}' ==  2" action="Ignore" />@1@-->
        <!--                ~1~                Ignore Measures Log @1@-->
        <!--~1~                                <when condition="'${event-properties:item=EventId_Id}' ==  1" action="Ignore" />@1@-->
        <!--            </filters>-->
        <!--        </logger>-->
        <!--        <logger name="*" minlevel="Trace" writeTo="asyncConsole">-->
        <!--            <filters>-->
        <!--                <when condition="starts-with('${logger}','Server')" action="Ignore" />-->
        <!--            </filters>-->
        <!--        </logger>-->

        <!--        <logger name="Microsoft.EntityFrameworkCore.*" maxLevel="Info" final="true" />-->
        <!--        <logger name="Microsoft.AspNetCore.Mvc.*" maxLevel="Info" final="true" />-->
        <!--        <logger name="Microsoft.AspNetCore.Hosting.Internal.WebHost" maxLevel="Info" final="true" />-->
        <!--        <logger name="Microsoft.*" maxLevel="Info" final="true" />-->

<!--        <logger name="*" minlevel="Info" writeTo="asyncConsole">-->
<!--        </logger>-->
    </rules>
</nlog>